module Main where

import Daml.Script

type AssetKey = (Party, Text)

-- I'm using a propose/accept workflow to ensure that the created asset
-- contracts have authorizations from both the issuing party and the
-- 'registry'. The registry authorization is required because it is the
-- key maintainer.
template AssetProposal
  with
    issuer    : Party
    owner     : Party
    registry    : Party
    observers : [ Party ]
    name       : Text
  where
    ensure name /= ""
    signatory issuer
    observer owner, registry

    choice Approve : ContractId Asset
      with
        smartId: Text
      controller registry
      do create Asset 
          with
            smartId = smartId
            ..

template Asset
  with
    issuer    : Party
    owner     : Party
    registry    : Party
    observers : [ Party ]
    smartId   : Text
    name      : Text
  where
    ensure name /= ""
    signatory registry, issuer
    observer owner :: observers

    key (registry, smartId): AssetKey
    maintainer key._1

    choice Give : ContractId Asset
      with
        newOwner : Party
      controller owner
      do create this with
           owner = newOwner

template AssetOracle
  with
    registry : Party
    observers : [ Party ]
  where
    signatory registry
    observer observers

    nonconsuming choice CheckSmartId : Bool
      with
        requestor : Party
        smartId : Text
      controller requestor
      do
        assert $ elem requestor observers

        v <- visibleByKey @Asset (registry, smartId)

        pure v

setup : Script ()
setup = script do
-- user_setup_begin
  alice <- allocatePartyWithHint "Alice" (PartyIdHint "Alice")
  bob <- allocatePartyWithHint "Bob" (PartyIdHint "Bob")
  registry <- allocatePartyWithHint "registry" (PartyIdHint "registry")

  aliceId <- validateUserId "alice"
  bobId <- validateUserId "bob"
  registryId <- validateUserId "registry"

  createUser (User aliceId (Some alice)) [CanActAs alice]
  createUser (User bobId (Some bob)) [CanActAs bob]
  createUser (User registryId (Some bob)) [CanActAs registry]  
-- user_setup_end

  oracle <- submit registry do
    createCmd AssetOracle with
      registry = registry
      observers = [ alice, bob ]

  tvp1 <- submit alice do
    createCmd AssetProposal with
      issuer = alice
      owner = alice
      registry = registry
      observers = []
      name = "TV One"

  tv1 <- submit registry do
    exerciseCmd tvp1 Approve with smartId = "tv-1"

  tvp2 <- submit alice do
    createCmd AssetProposal with
      issuer = alice
      owner = alice
      registry = registry
      observers = []
      name = "TV Two"

  tv2 <- submit registry do
    exerciseCmd tvp2 Approve with smartId = "tv-2"
    
  tvp3 <- submit bob do
    createCmd AssetProposal with
      issuer = bob
      owner = bob
      registry = registry
      observers = [ alice ]
      name = "TV Three"

  tv3 <- submit registry do
    exerciseCmd tvp3 Approve with smartId = "tv-3"

  tvp4 <- submit bob do
    createCmd AssetProposal with
      issuer = bob
      owner = bob
      registry = registry
      observers = [ ]
      name = "TV Bob Only"

  tv4 <- submit registry do
    exerciseCmd tvp4 Approve with smartId = "tv-4"

-- This succeeds because alice is listed as an observer to the tv-3
-- contract.
  visible3 <- submit alice do
    exerciseCmd oracle CheckSmartId
      with
        requestor = alice
        smartId = "tv-3"

  assertMsg "TV 3 should be visible" (visible3) 

  -- This fails with an indication that the tv-4 contract is present but not
  -- visible to alice. (The detailed error you see running this as a plan submit
  -- is a developer aid that the script engine provides. Against a production
  -- ledger, it would be returned as an error code related to key visiblity.)
  --
  -- This error is also a category of errors that cannot be detected or handled on
  -- ledger.
  submitMustFail alice do
    exerciseCmd oracle CheckSmartId
      with
        requestor = alice
        smartId = "tv-4"

  pure ()
